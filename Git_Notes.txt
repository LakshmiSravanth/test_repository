Version Control Systems:
------------------------
Version Control is a system that records changes to a file or set of files over time so that you can recall the specific versions later.

**( For our project store the files in a time stamped directory foor version controlling.)**

One of the more  popular VCS tools was a system called RCS works by kepping patch
sets (this is, the differences between files) in a special format on the disk; it can
then re-create what any file looked like at any point in time by adding up all the patches.

Centralized Version control systems:
-----------------------------------
The centralised file system has one disadvantage that the files are stored in only one 
location and  if that location is compromised then the entire progress history is lost.
The local version control systems also suffer from the same disadvantage.

Distributed Version Control Systems:
------------------------------------
Example: Git, Mercurial, Bazaar or Darcs. Here the clients don't just check out the
latest snapshot of the files; rather, they fully mirror the repository, including
its full history. Every clone is really a full backup of all the data.

Furthermore, many of these systems deal pretty well with having several remote repositories they
can work with, so you can collaborate with different groups of people in different ways
simultaneously within the same project. This allows you to set up several types of workflows that
arenâ€™t possible in centralized systems, such as hierarchical models.

Git: Supports non-linear ddevelopment, Fully distributed.

Git Basics:
-----------
Git stores and thinks about information in a very different way, and understanding 
differences will help you avoid becoming confused while using it.

Snapshots, Not Differences:
---------------------------
The main difference between the git and the other VCSs is the way git thinks about its 
data. Conceptually most other systems store information as a list of file-based changes.
These other systems think of the information they store as a set of files and the 
changes made to each file over the time. --> delta based version control.
											 ----------------------------
CVS, subversion, Perforce, Bazaar belong to the above category.

Git doesnot think of its data like that. It considers its data like a series of a 
miniature filesystem. Git basically takes a picture of what all your files look like
at that moment and stores a reference to that snapshot. To be efficient, if files have
not changed, Git doesnot store the file again, just a link to the previous identical
file it has already stored. Git thinks of its data like a stream of snapshotes.

--> Nearly every operation is local. The entire history of teh projects are right 
there on your local disk.
TO get the history of the project git doesnot need to go to the server to fetch it.
It simply gets it from the local database.

Git stores everything in its database not by the filename but by the hash value of
its contents.

When you do actions in Git, nearly all of them only adds data to the Git database.

THE THREE STATES:
----------------
Git has three main states your files can reside in: committed, modified, and staged.
--> committed means that the data is safely stored in your local database.
--> modified means that you have changed the file but have not committed it to your
	database yet.
--> staged means that you have marked a modified file in its current version to go
	into your next commit snapshot.

The Git directory is where Git stores the metadata and teh object database for your 
project. This is what is copied when you clone a repository from another computer.

The working three is a single checkout of one version of the project. These files are 
pulled out of teh compressed database in the Git directory and placed on the disk for 
you to use or modify.

The staging area is a file, generally contained in your Git directory, that stores 
information about what will go into your next commit.

The basic Git workflow goes something like this:
	1. You modify files in your working tree.	
	2. You selectively stage just those changes you want to be part of your next 
	commit, which adds only those changes to the staging area.
	3. You do a commit, which takes the files as they are in the staging area and
	stores that snapshot permanently to your Git directory.

First-Time Git Setup:
---------------------










